import type { Express, Request } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import session from "express-session";
import { z } from "zod";
import { SpreadsheetService } from "./services/spreadsheet";
import { AuthService } from "./services/auth";
import MemoryStore from "memorystore";
import pgSession from 'connect-pg-simple';
import { pool } from "./db";

// 擴展會話類型，增加所有需要的屬性
declare module "express-session" {
  interface SessionData {
    isAdmin: boolean;
    loginTime?: number;
    userAgent?: string;
    lastActivity?: number;
  }
}

// 创建PostgreSQL会话存储
const PostgresStore = pgSession(session);

export async function registerRoutes(app: Express): Promise<Server> {
  // 确保session表存在
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS "session" (
        "sid" varchar NOT NULL COLLATE "default",
        "sess" json NOT NULL,
        "expire" timestamp(6) NOT NULL,
        CONSTRAINT "session_pkey" PRIMARY KEY ("sid")
      );
      CREATE INDEX IF NOT EXISTS "IDX_session_expire" ON "session" ("expire");
    `);
    console.log("Session table verified/created");
  } catch (err) {
    console.error("Failed to create session table:", err);
  }

  // 完全重寫會話管理，提供最高級別的持久性和可靠性
  const sessionMiddleware = session({
    secret: process.env.SESSION_SECRET || "supersecretkey",
    name: 'admin.sid', // 使用更具體的cookie名，避免衝突
    resave: true, // 強制在每次請求時保存會話，確保不會丟失
    saveUninitialized: false,
    rolling: true, // 每次響應都會重設過期時間
    store: new PostgresStore({
      pool: pool,
      tableName: 'session',
      createTableIfMissing: true,
      disableTouch: false, // 確保touch能夠更新存儲中的cookie過期時間
      pruneSessionInterval: 60 * 60, // 每小時進行一次過期會話清理
      // 強制控制資料庫中的會話過期時間
      ttl: 10 * 60 // 明確設置資料庫中的會話存活時間為10分鐘
    }),
    cookie: {
      secure: false, // 即使在生產環境也不要使用secure，避免部署問題
      httpOnly: true,
      maxAge: 10 * 60 * 1000, // 10分鐘超時
      sameSite: 'lax',
      path: '/',
      expires: new Date(Date.now() + 10 * 60 * 1000) // 明確設置10分鐘過期時間
    },
  });
  
  app.use(sessionMiddleware);

  // 添加活動監測中間件，實現會話超時自動登出
  app.use((req, res, next) => {
    // 如果是管理員會話，進行活動時間檢查
    if (req.session?.isAdmin) {
      const lastActivity = req.session.lastActivity || req.session.loginTime || Date.now();
      const now = Date.now();
      const inactiveTime = now - lastActivity;
      const TIMEOUT = 10 * 60 * 1000; // 10分鐘超時
      
      // 如果不活動時間超過30分鐘，則自動登出
      if (inactiveTime > TIMEOUT) {
        console.log(`管理員會話自動超時登出，不活動時間: ${Math.floor(inactiveTime/1000)}秒`);
        
        // 清除管理員狀態
        req.session.isAdmin = false;
        req.session.loginTime = undefined;
        
        // 完成當前請求，下一個請求需要重新登入
        next();
        return;
      }
      
      // 更新最後活動時間
      req.session.lastActivity = now;
    }
    
    // 繼續處理請求
    next();
  });

  // Initialize services
  const spreadsheetService = new SpreadsheetService();
  const authService = new AuthService();

  // Auth API routes
  app.post("/api/auth/login", async (req, res) => {
    try {
      const { password } = req.body;

      if (!password) {
        return res.status(400).json({ success: false, message: "Password is required" });
      }

      console.log("開始驗證管理員密碼");
      
      // 先使用環境變數驗證，確保即使在重新部署後也能登入
      const envPassword = process.env.ADMIN_PASSWORD || '';
      let verified = false;
      
      if (envPassword && password === envPassword) {
        console.log("使用環境變數密碼驗證成功");
        verified = true;
      } else {
        // 從服務獲取當前密碼
        const passwordDetails = authService.getCurrentPassword();
        const isPasswordHashed = passwordDetails && passwordDetails.startsWith('*HASH*:');
        
        console.log(`密碼已載入，長度: ${passwordDetails?.length || 0}, 
                    哈希模式: ${isPasswordHashed ? '是' : '否'}`);
        
        console.log(`使用${isPasswordHashed ? '哈希' : '明文'}模式驗證密碼`);
        
        // 執行實際驗證
        verified = await authService.verifyPassword(password);
      }
      
      console.log(`密碼驗證結果: ${verified ? '成功' : '失敗'}`);
      
      if (!verified) {
        return res.status(401).json({ success: false, message: "Incorrect password" });
      }

      // 密碼驗證成功，繼續處理
      // 強化管理員會話設置
      if (req.session) {
        // 設置會話數據
        req.session.isAdmin = true;
        req.session.loginTime = Date.now();
        req.session.lastActivity = Date.now(); // 重要: 顯式設置最後活動時間
        req.session.userAgent = req.headers['user-agent'] || 'unknown';
        
        // 明確設定會話 cookie 的過期時間，確保與會話配置一致
        if (req.session.cookie) {
          // 更新 cookie 的過期時間為10分鐘
          req.session.cookie.expires = new Date(Date.now() + 10 * 60 * 1000);
          req.session.cookie.maxAge = 10 * 60 * 1000;
        }
        
        // 確保立即保存會話並同步到數據庫
        await new Promise<void>((resolve, reject) => {
          req.session.save((err) => {
            if (err) {
              console.error("Error saving session:", err);
              reject(err);
            } else {
              console.log("Admin session saved successfully");
              resolve();
            }
          });
        });
        
        // 返回登入成功响應和會話ID供診斷用
        return res.json({
          success: true,
          sessionId: req.sessionID, // 僅用於診斷，實際生產環境不應返回
          message: "Authentication successful"
        });
      } else {
        console.error("Session object not available");
        return res.status(500).json({ success: false, message: "Session initialization failed" });
      }
    } catch (error) {
      console.error("Login error:", error);
      return res.status(500).json({ success: false, message: "Login failed" });
    }
  });

  app.post("/api/auth/logout", (req, res) => {
    // 確保清除會話數據，無論是否存在會話對象
    if (req.session) {
      // 先立即清除會話中的管理員標記，避免在destroy過程中仍然有效
      req.session.isAdmin = false;
      delete req.session.loginTime;
      delete req.session.lastActivity;
      
      // 強制保存修改
      req.session.save(() => {
        // 然後完全銷毀會話
        req.session.destroy((err) => {
          if (err) {
            console.error("Error destroying session:", err);
            return res.status(500).json({ success: false, message: "Logout failed" });
          }
          
          // 確保清除正確的cookie
          res.clearCookie("admin.sid", {
            path: '/',
            httpOnly: true,
            secure: false,
            sameSite: 'lax'
          });
          
          console.log("Session destroyed successfully, cookie cleared");
          return res.json({ success: true });
        });
      });
    } else {
      // 即使沒有會話也清除可能存在的cookie
      res.clearCookie("admin.sid", {
        path: '/',
        httpOnly: true,
        secure: false,
        sameSite: 'lax'
      });
      
      console.log("No session to destroy, cookie cleared");
      return res.json({ success: true });
    }
  });

  // 增強身份驗證狀態端點，增加更多診斷信息
  app.get("/api/auth/status", (req, res) => {
    try {
      // 檢查會話對象是否可用
      if (!req.session) {
        console.error("Session object not available in status check");
        return res.json({ 
          authenticated: false,
          error: "Session not initialized",
          sessionExists: false
        });
      }
      
      const isAuthenticated = req.session.isAdmin === true;
      
      // 觸發會話保存，更新過期時間
      req.session.touch();
      
      // 強制更新最後活動時間，確保會話不會在活動狀態下過期
      if (isAuthenticated) {
        req.session.lastActivity = Date.now(); 
        
        // 同步更新 cookie 過期時間為 10 分鐘
        if (req.session.cookie) {
          req.session.cookie.expires = new Date(Date.now() + 10 * 60 * 1000);
          req.session.cookie.maxAge = 10 * 60 * 1000;
        }
        
        // 強制保存會話到數據庫
        req.session.save();
      }
      
      // 計算剩餘有效時間（用於超時提醒）
      let remainingTime = 0;
      const TIMEOUT = 10 * 60 * 1000; // 10分鐘超時
      
      if (isAuthenticated && req.session.lastActivity) {
        const now = Date.now();
        const inactiveTime = now - req.session.lastActivity;
        remainingTime = Math.max(0, TIMEOUT - inactiveTime);
      }
      
      // 返回狀態（生產環境中應該僅返回authenticated字段）
      return res.json({
        authenticated: isAuthenticated,
        sessionId: req.sessionID,
        sessionAge: req.session.loginTime ? Math.floor((Date.now() - req.session.loginTime) / 1000) + "s" : "unknown",
        lastActivity: req.session.lastActivity ? new Date(req.session.lastActivity).toISOString() : null,
        remainingTimeSeconds: Math.floor(remainingTime / 1000),
        cookie: {
          maxAge: req.session.cookie?.maxAge ? Math.floor(req.session.cookie.maxAge / 1000) + "s" : "unknown"
        }
      });
    } catch (error) {
      console.error("Error checking auth status:", error);
      return res.json({ authenticated: false, error: "Status check failed" });
    }
  });

  // Products API routes
  app.get("/api/products", async (req, res) => {
    try {
      const products = await spreadsheetService.getProducts();
      return res.json(products);
    } catch (error) {
      console.error("Get products error:", error);
      return res.status(500).json({ message: "Failed to fetch products" });
    }
  });

  // Orders API routes
  
  // 1. 特殊路由应该放在前面，避免被参数路由拦截
  app.get("/api/orders/history", async (req, res) => {
    try {
      // Check if user is admin
      if (!req.session?.isAdmin) {
        return res.status(403).json({ message: "Unauthorized" });
      }

      const { startDate, endDate } = req.query;
      
      if (!startDate || !endDate) {
        return res.status(400).json({ message: "Start date and end date are required" });
      }
      
      const dateSchema = z.string().regex(/^\d{4}-\d{2}-\d{2}$/);
      const validStartDate = dateSchema.safeParse(startDate);
      const validEndDate = dateSchema.safeParse(endDate);
      
      if (!validStartDate.success || !validEndDate.success) {
        return res.status(400).json({ message: "Invalid date format" });
      }

      const orders = await storage.getOrdersByDateRange(
        startDate as string,
        endDate as string,
        "completed"
      );
      
      return res.json(orders);
    } catch (error) {
      console.error("Get history error:", error);
      return res.status(500).json({ message: "Failed to fetch history orders" });
    }
  });

  app.get("/api/orders/stats", async (req, res) => {
    try {
      // Check if user is admin
      if (!req.session?.isAdmin) {
        return res.status(403).json({ message: "Unauthorized" });
      }

      const { year, month } = req.query;
      
      if (!year) {
        return res.status(400).json({ message: "Year is required" });
      }
      
      const yearSchema = z.string().regex(/^\d{4}$/);
      const validYear = yearSchema.safeParse(year);
      
      if (!validYear.success) {
        return res.status(400).json({ message: "Invalid year format" });
      }

      const monthSchema = z.string().regex(/^\d{1,2}$/).optional();
      const validMonth = monthSchema.safeParse(month);
      
      if (month && !validMonth.success) {
        return res.status(400).json({ message: "Invalid month format" });
      }

      const stats = await storage.generateOrderStats(year as string, month as string | undefined);
      return res.json(stats);
    } catch (error) {
      console.error("Get stats error:", error);
      return res.status(500).json({ message: "Failed to generate statistics" });
    }
  });
  
  // 新增API端點 - CSV匯出功能 (使用BOM來確保中文顯示正確)
  app.get("/api/orders/export-csv", async (req, res) => {
    try {
      // 檢查用戶是否為管理員
      if (!req.session?.isAdmin) {
        return res.status(403).json({ message: "Unauthorized" });
      }

      const { year, month } = req.query;
      
      if (!year) {
        return res.status(400).json({ message: "Year is required" });
      }
      
      // 驗證參數
      const yearSchema = z.string().regex(/^\d{4}$/);
      const validYear = yearSchema.safeParse(year);
      
      if (!validYear.success) {
        return res.status(400).json({ message: "Invalid year format" });
      }

      const monthSchema = z.string().regex(/^\d{1,2}$/).optional();
      const validMonth = monthSchema.safeParse(month);
      
      if (month && !validMonth.success) {
        return res.status(400).json({ message: "Invalid month format" });
      }

      // 獲取訂單統計數據
      const data = await storage.generateOrderStats(year as string, month as string | undefined);
      
      // 檢查是否有訂單數據
      if (!data.stats || data.stats.length === 0 || !data.orders || data.orders.length === 0) {
        return res.status(404).json({ message: "No order data found" });
      }
      
      // 生成CSV內容
      let csvContent = "日期,產品編號,產品顏色,數量(公斤)\n";
      
      // 根據日期對訂單進行排序
      const sortedOrders = [...data.orders].sort((a, b) => {
        return new Date(a.delivery_date).getTime() - new Date(b.delivery_date).getTime();
      });
      
      // 添加訂單數據到CSV
      sortedOrders.forEach(order => {
        const date = order.delivery_date.split('T')[0];
        csvContent += `${date},${order.product_code},${order.product_name},${Number(order.quantity).toFixed(2)}\n`;
      });
      
      // 添加 BOM (Byte Order Mark) 以確保 Excel 能正確識別 UTF-8 編碼
      const BOM = '\uFEFF';
      const csvContentWithBOM = BOM + csvContent;
      
      // 設置響應頭，使用英文檔名避免跨平台編碼問題
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', `attachment; filename=Dayuan_Sales_Report_${year}${month ? '_' + month : ''}.csv`);
      
      // 發送包含 BOM 的 CSV 內容
      return res.send(csvContentWithBOM);
    } catch (error) {
      console.error("Export error:", error);
      return res.status(500).json({ message: "Failed to export data" });
    }
  });
  
  // 2. 然后是基本路由
  app.get("/api/orders", async (req, res) => {
    try {
      const status = req.query.status as string | undefined;
      
      const statusSchema = z.enum(["temporary", "completed"]).optional();
      const validStatus = statusSchema.safeParse(status);
      
      if (status && !validStatus.success) {
        return res.status(400).json({ message: "Invalid status parameter" });
      }
      
      const orders = await storage.getOrders(status as "temporary" | "completed" | undefined);
      return res.json(orders);
    } catch (error) {
      console.error("Get orders error:", error);
      return res.status(500).json({ message: "Failed to fetch orders" });
    }
  });

  app.post("/api/orders", async (req, res) => {
    try {
      const orderData = req.body;
      const order = await storage.createOrder(orderData);
      return res.status(201).json(order);
    } catch (error) {
      console.error("Create order error:", error);
      return res.status(500).json({ message: "Failed to create order" });
    }
  });
  
  // 3. 最后是参数路由
  app.delete("/api/orders/:id", async (req, res) => {
    try {
      const { id } = req.params;
      await storage.deleteOrder(id);
      return res.json({ success: true });
    } catch (error) {
      console.error("Delete order error:", error);
      return res.status(500).json({ message: "Failed to delete order" });
    }
  });
  
  // 更新暂存订单（编辑数量和/或日期）
  app.patch("/api/orders/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const { quantity, delivery_date } = req.body;
      
      if (!quantity) {
        return res.status(400).json({ message: "Quantity is required" });
      }
      
      // 验证数量是否为正数
      const quantitySchema = z.number().positive();
      const validQuantity = quantitySchema.safeParse(quantity);
      
      if (!validQuantity.success) {
        return res.status(400).json({ message: "Quantity must be a positive number" });
      }
      
      // 如果提供了日期，验证日期格式是否正确
      if (delivery_date) {
        const dateSchema = z.string().regex(/^\d{4}-\d{2}-\d{2}$/);
        const validDate = dateSchema.safeParse(delivery_date);
        
        if (!validDate.success) {
          return res.status(400).json({ message: "Invalid date format. Use YYYY-MM-DD" });
        }
      }
      
      await storage.updateTemporaryOrder(id, quantity, delivery_date);
      return res.json({ success: true });
    } catch (error) {
      console.error("Update order error:", error);
      return res.status(500).json({ message: "Failed to update order" });
    }
  });

  app.patch("/api/orders/:id/complete", async (req, res) => {
    try {
      // Check if user is admin
      if (!req.session?.isAdmin) {
        return res.status(403).json({ message: "Unauthorized" });
      }

      const { id } = req.params;
      const order = await storage.completeOrder(id);
      return res.json(order);
    } catch (error) {
      console.error("Complete order error:", error);
      return res.status(500).json({ message: "Failed to complete order" });
    }
  });
  
  // 编辑历史订单（完成的订单）
  app.patch("/api/orders/history/:id", async (req, res) => {
    try {
      // Check if user is admin
      if (!req.session?.isAdmin) {
        return res.status(403).json({ message: "Unauthorized" });
      }

      const { id } = req.params;
      const { product_code, quantity } = req.body;
      
      if (!product_code || !quantity) {
        return res.status(400).json({ message: "Product code and quantity are required" });
      }
      
      // Validate quantity
      const quantitySchema = z.number().positive();
      const validQuantity = quantitySchema.safeParse(quantity);
      
      if (!validQuantity.success) {
        return res.status(400).json({ message: "Quantity must be a positive number" });
      }
      
      await storage.editHistoryOrder(id, product_code, quantity);
      return res.json({ success: true });
    } catch (error) {
      console.error("Edit history order error:", error);
      return res.status(500).json({ message: "Failed to update history order" });
    }
  });
  
  // 删除历史订单（完成的订单）
  app.delete("/api/orders/history/:id", async (req, res) => {
    try {
      // Check if user is admin
      if (!req.session?.isAdmin) {
        return res.status(403).json({ message: "Unauthorized" });
      }

      const { id } = req.params;
      const { product_code } = req.body;
      
      if (!product_code) {
        return res.status(400).json({ message: "Product code is required" });
      }
      
      await storage.deleteHistoryOrder(id, product_code);
      return res.json({ success: true });
    } catch (error) {
      console.error("Delete history order error:", error);
      return res.status(500).json({ message: "Failed to delete history order" });
    }
  });
  
  // 完全重寫的管理員密碼更新端點
  app.post("/api/admin/password", async (req, res) => {
    try {
      // 檢查是否有管理員權限
      if (!req.session?.isAdmin) {
        return res.status(403).json({ message: "未授權，請先登入管理員帳戶" });
      }
      
      console.log("管理員密碼更新請求已接收");
      
      const { currentPassword, newPassword } = req.body;
      
      // 驗證請求參數
      if (!currentPassword || !newPassword) {
        return res.status(400).json({ message: "當前密碼和新密碼都是必填欄位" });
      }
      
      if (newPassword.length < 4) {
        return res.status(400).json({ message: "新密碼長度不能少於4個字符" });
      }
      
      // 使用優化後的 Storage 實現進行密碼更新
      // 這會處理密碼模式自動檢測 (哈希 vs 明文)，並確保所有儲存位置同步
      console.log("使用 Storage 實例執行密碼更新");
      const updateResult = await storage.updateAdminPassword(currentPassword, newPassword);
      
      if (!updateResult) {
        console.error("管理員密碼更新失敗: 可能是當前密碼不正確或數據庫操作失敗");
        return res.status(400).json({ message: "當前密碼不正確或無法更新密碼" });
      }
      
      // 強制更新會話，確保用戶可以立即使用新密碼
      req.session.touch();
      
      // 強制保存會話到數據庫
      await new Promise<void>((resolve, reject) => {
        req.session.save((err) => {
          if (err) {
            console.error("保存會話失敗:", err);
            reject(err);
          } else {
            resolve();
          }
        });
      });
      
      console.log("管理員密碼更新成功，會話已更新");
      return res.json({ success: true, message: "管理員密碼已成功更新，請使用新密碼重新登入" });
    } catch (error) {
      console.error("更新管理員密碼時發生錯誤:", error);
      return res.status(500).json({ message: "密碼更新失敗，請稍後再試" });
    }
  });
  
  // 配置相关 API
  // 获取所有配置信息 - 允许非管理员访问，但仅返回公共配置
  app.get("/api/configs", async (req, res) => {
    try {
      const isAuthenticated = req.session && req.session.isAdmin;
      const configs = await storage.getAllConfigs();
      
      // 移除敏感信息，仅返回是否配置了该项
      // 对于非管理员，只返回非敏感配置
      const safeConfigs = Object.keys(configs).reduce((result, key) => {
        // 对于密码和密钥，对管理员显示掩码，对非管理员不显示
        if (key.toLowerCase().includes('password') || 
            key.toLowerCase().includes('key') || 
            key.toLowerCase().includes('secret')) {
          if (isAuthenticated) {
            result[key] = configs[key] ? '******' : null;
          }
        } else {
          // 非敏感配置对所有用户可见
          result[key] = configs[key];
        }
        return result;
      }, {} as Record<string, string | null>);
      
      return res.json(safeConfigs);
    } catch (error) {
      console.error("Error getting configs:", error);
      return res.status(500).json({ message: "Failed to get configurations" });
    }
  });
  
  // 更新配置信息
  app.post("/api/configs", async (req, res) => {
    try {
      const isAuthenticated = req.session && req.session.isAdmin;
      if (!isAuthenticated) {
        return res.status(403).json({ message: "Unauthorized" });
      }
      
      const { key, value } = req.body;
      
      if (!key || value === undefined) {
        return res.status(400).json({ message: "Key and value are required" });
      }
      
      try {
        // 所有配置項透過資料庫儲存
        await storage.setConfig(key, value);
        
        // 同時更新環境變數，使其立即生效
        if (key === 'SUPABASE_URL' || key === 'SUPABASE_KEY' || 
            key === 'SPREADSHEET_API_KEY' || key === 'SPREADSHEET_ID' ||
            key === 'PRICE_SPREADSHEET_API_KEY' || key === 'PRICE_SPREADSHEET_ID') {
          process.env[key] = value;
        }
        
        return res.json({ success: true });
      } catch (error) {
        console.error(`Error updating config for ${key}:`, error);
        throw error;
      }
    } catch (error) {
      console.error("Error updating config:", error);
      return res.status(500).json({ message: "Failed to update configuration" });
    }
  });
  
  // 更新管理员密码
  app.post("/api/admin/password", async (req, res) => {
    try {
      const isAuthenticated = req.session && req.session.isAdmin;
      if (!isAuthenticated) {
        return res.status(403).json({ message: "Unauthorized" });
      }
      
      const { currentPassword, newPassword } = req.body;
      
      if (!currentPassword || !newPassword) {
        return res.status(400).json({ message: "Current password and new password are required" });
      }
      
      const success = await storage.updateAdminPassword(currentPassword, newPassword);
      
      if (!success) {
        return res.status(400).json({ message: "Invalid current password" });
      }
      
      return res.json({ success: true });
    } catch (error) {
      console.error("Error updating admin password:", error);
      return res.status(500).json({ message: "Failed to update admin password" });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
